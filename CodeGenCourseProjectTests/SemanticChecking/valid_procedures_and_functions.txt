program valid_procedures_and_functions;
begin
	procedure p_no_args();
	begin
		var a : integer;
	end;

	procedure_args(a : integer, b : boolean);
	begin
		if b then
			return;

		writeln("b is false, here is a: ", a);
	end;


	function f_no_args() : integer;
	begin
		var a : integer;
		return 4 * 2;
	end;

	function_args(a : integer, b : string, c : real) : boolean;
	begin
		a := 4 * 2;
		writeln("hello");
		if not b and c < 4.2 then
			return true
		else
			return false;
	end;
	
	p_no_args();
	procedure_args(2 % 4, true);
	f_no_args();

	var r : real;
	f_args(3*32, "hello", r * 124);

	var b : boolean;
	var i : integer;
	var s : string;

	i := f_no_args() - 24;
	b := function_args() and not true;

	procedure recursive();
	begin
		recursive();
	end;

	function f_recursive(a : int) : string;
	{
		return f_recursive(a + 1);
	}

	procedure nested_no_args();
	begin
		i := 24;
		var i : string;
		i := "hello";
		procedure inner();
		begin
			writeln("hello");
		end;
	end;

	procedure inner(a : int); {* redeclaration in outer scope *}
	begin
		return;
	end;

	inner(4);

	function f_nested_args(a : boolean) : string;
	begin
		b := true;
		var b : integer;
		b := 24 % 2;
		procedure f_nested_args();
		begin
			writeln("inner - f");
		end;
		f_nested_args();
	end;



	writeln(2, 3, 4, "hello " + world, true <> false);
	writeln();
	read(a, b, c, d);
	

	procedure read(a : string);
	begin
		writeln(a);
	end;


	read("hello");

	procedure writeln(var a : integer);
	begin
		a := a + 4;
	end;

	writeln(4);

end;